#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        thumb: thumb {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <250>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1          &kp F2      &kp F3    &kp F4      &kp F5                                                                                      &kp F6    &kp F7        &kp F8      &kp F9        &kp F10
            &kp EQUAL       &kp N1      &kp N2    &kp N3      &kp N4     &kp N5                                                                   &kp N6  &kp N7    &kp N8        &kp N9      &kp N0        &kp GRAVE
            &kp TAB         &kp Q       &kp W     &kp E       &kp R      &kp T                                                                    &kp Y   &kp U     &kp I         &kp O       &kp P         &kp SQT
            &kp ESC         &kp A       &kp S     &kp D       &kp F      &kp G                                                                    &kp H   &kp J     &kp K         &kp L       &kp SEMI      &kp MINUS
            &layer_td       &kp Z       &kp X     &kp C       &kp V      &kp B   &kp LCTRL  &kp LGUI  &kp HOME      &kp UP   &kp LALT  &kp LSHFT  &kp N   &kp M     &kp COMMA     &kp PERIOD  &kp FSLH      &kp BSLH
            &magic MAGIC 0  &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp LBKT           &kp BSPC   &kp DEL   &kp F11       &kp F12  &kp RET   &kp SPACE          &kp RBKT  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp PSCRN
            >;
        };

        lower_layer {
            bindings = <
            &none  &none  &none  &none         &none                                                                                &none     &none     &none      &none     &none
            &none  &none  &none  &none         &none         &none                                                           &none  &none     &none     &none      &none     &none
            &none  &none  &none  &none         &none         &none                                                           &none  &kp HOME  &kp UP    &kp END    &kp PGUP  &none
            &none  &none  &none  &kp C_BRI_DN  &kp C_BRI_UP  &none                                                           &none  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PGDN  &none
            &none  &none  &none  &none         &none         &none   &trans  &trans  &to DEFAULT     &trans  &trans  &trans  &none  &none     &none     &none      &none     &none
            &none  &none  &none  &none         &none                 &trans  &trans  &trans          &trans  &trans  &trans         &none     &none     &none      &none     &none
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
            &none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
            &none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
            &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
            &sys_reset   &none            &none            &none            &none            &none           &bt_2  &bt_3  &none            &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
            &none        &none            &none            &none            &none                            &bt_0  &bt_1  &out OUT_USB     &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
