#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define ENGRAM 3

/ {
    behaviors {
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        num_row_1: num_row_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_1";
            bindings = <&kp EXCL>, <&kp N1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_2: num_row_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_2";
            bindings = <&kp LBKT>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_3: num_row_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_3";
            bindings = <&kp LBRC>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_4: num_row_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_4";
            bindings = <&kp LPAR>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_5: num_row_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_5";
            bindings = <&kp PLUS>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_6: num_row_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_6";
            bindings = <&kp EQUAL>, <&kp NUMBER_6>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        num_row_7: num_row_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_7";
            bindings = <&kp RPAR>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_9: num_row_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_9";
            bindings = <&kp RBKT>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_0: num_row_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_0";
            bindings = <&kp AMPERSAND>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_8: num_row_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_8";
            bindings = <&kp RBRC>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_row_grave: num_row_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_ROW_GRAVE";
            bindings = <&kp PERCENT>, <&kp ASTRK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        row_tab: row_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "ROW_TAB";
            bindings = <&kp AT>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pipe_n1: pipe_n1 {
            compatible = "zmk,behavior-mod-morph";
            label = "pipe_n1";
            bindings = <&kp PIPE>, <&kp N1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equal_n2: equal_n2 {
            compatible = "zmk,behavior-mod-morph";
            label = "equal_n2";
            bindings = <&kp EQUAL>, <&kp N2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
        tilde_n3: tilde_n3 {
            compatible = "zmk,behavior-mod-morph";
            label = "tilde_n3";
            bindings = <&kp TILDE>, <&kp N3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_n4: plus_n4 {
            compatible = "zmk,behavior-mod-morph";
            label = "plus_n4";
            bindings = <&kp PLUS>, <&kp N4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lower_n5: lower_n5 {
            compatible = "zmk,behavior-mod-morph";
            label = "lower_n5";
            bindings = <&kp LT>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        greater_n6: greater_n6 {
            compatible = "zmk,behavior-mod-morph";
            label = "greater_n6";
            bindings = <&kp GT>, <&kp N6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caret_n7: caret_n7 {
            compatible = "zmk,behavior-mod-morph";
            label = "caret_n7";
            bindings = <&kp CARET>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ampersand_n8: ampersand_n8 {
            compatible = "zmk,behavior-mod-morph";
            label = "ampersand_n8";
            bindings = <&kp AMPS>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        percent_n9: percent_n9 {
            compatible = "zmk,behavior-mod-morph";
            label = "percent_n9";
            bindings = <&kp PERCENT>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        astrk_n0: astrk_n0 {
            compatible = "zmk,behavior-mod-morph";
            label = "astrk_n0";
            bindings = <&kp ASTRK>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        at_grave: at_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "at_grave";
            bindings = <&kp AT>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hash_dollar: hash_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "hash_dollar";
            bindings = <&kp HASH>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sqt_lpar: sqt_lpar {
            compatible = "zmk,behavior-mod-morph";
            label = "sqt_lpar";
            bindings = <&kp SQT>, <&kp LPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dqt_rpar: dqt_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "dqt_rpar";
            bindings = <&kp DQT>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "comma_semi";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        period_colon: period_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "period_colon";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "question_exclamation";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4      &kp F5                                                                                                                                                             &kp F6      &kp F7      &kp F8        &kp F9        &kp F10
&num_row_grave  &num_row_1    &num_row_2    &num_row_3  &num_row_4  &num_row_5                                                                                                                                 &num_row_6  &num_row_7  &num_row_8  &num_row_9    &num_row_0    &kp GRAVE
&row_tab        &kp SEMI      &kp COMMA     &kp PERIOD  &kp P       &kp Y                                                                                                                                      &kp F       &kp G       &kp C       &kp R         &kp L         &kp FSLH
&kp DOLLAR      &kp A         &kp O         &kp E       &kp U       &kp I                                                                                                                                      &kp D       &kp H       &kp T       &kp N         &kp S         &kp MINUS
&layer_td       &kp SQT       &kp Q         &kp J       &kp K       &kp X       &mt LEFT_ALT ESCAPE       &kp LCMD          &kp LA(LC(LG(LSHFT)))  &kp RG(RC(LA(RSHFT)))  &kp LSHFT           &mt RMETA TAB    &kp B       &kp M       &kp W       &kp V         &kp Z         &kp BSLH
&magic MAGIC 0  &kp C_BRI_DN  &kp C_BRI_UP  &kp LEFT    &kp RIGHT               &mt LEFT_SHIFT BACKSPACE  &mt LCTRL DELETE  &kp LC(LA(LSHFT))      &kp RC(LA(RSHFT))      &mt LEFT_ALT ENTER  &mt RCTRL SPACE              &kp UP      &kp DOWN    &kp C_VOL_DN  &kp C_VOL_UP  &kp PSCRN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                        &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                         &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                       &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to DEFAULT  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &to ENGRAM   &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        engram_layer {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4      &kp F5                                                                                                                                                                        &kp F6     &kp F7         &kp F8        &kp F9        &kp F10
&kp LBKT        &pipe_n1      &equal_n2     &tilde_n3   &plus_n4    &lower_n5                                                                                                                                  &greater_n6            &caret_n7  &ampersand_n8  &percent_n9   &astrk_n0     &kp RBKT
&at_grave       &kp B         &kp Y         &kp O       &kp U       &sqt_lpar                                                                                                                                  &dqt_rpar              &kp L      &kp D          &kp W         &kp V         &kp Z
&hash_dollar    &kp C         &kp I         &kp E       &kp A       &comma_semi                                                                                                                                &period_colon          &kp H      &kp T          &kp S         &kp N         &kp Q
&layer_td       &kp G         &kp X         &kp J       &kp K       &kp MINUS   &mt LEFT_ALT ESCAPE       &kp LCMD          &kp LA(LC(LG(LSHFT)))  &kp RG(RC(LA(RSHFT)))  &kp LSHFT           &mt RMETA TAB    &question_exclamation  &kp R      &kp M          &kp F         &kp P         &kp BSLH
&magic MAGIC 0  &kp C_BRI_DN  &kp C_BRI_UP  &kp LEFT    &kp RIGHT               &mt LEFT_SHIFT BACKSPACE  &mt LCTRL DELETE  &kp LC(LA(LSHFT))      &kp RC(LA(RSHFT))      &mt LEFT_ALT ENTER  &mt RCTRL SPACE                         &kp UP     &kp DOWN       &kp C_VOL_DN  &kp C_VOL_UP  &kp PSCRN
            >;
        };
    };
};
